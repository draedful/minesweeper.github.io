{"version":3,"sources":["core/helpers/event-emitter.ts","core/minesweeper/Storage.ts","core/minesweeper/game/dispatcher.typing.ts","core/minesweeper/game/typing.ts","components/FieldSettings/storage.ts","components/FieldSettings/context.tsx","core/minesweeper/Stats.ts","components/GameStats/context.tsx","components/Button/index.tsx","components/FieldSettings/hooks.ts","core/minesweeper/game/controller.ts","helpers/is_dev_mode.ts","core/minesweeper/server/helpers.ts","core/minesweeper/server/index.ts","helpers/env.ts","server/context.tsx","components/minesweeper/hooks/context.tsx","components/minesweeper/hooks/index.ts","components/GameStats/hooks.ts","core/minesweeper/solver/index.ts","components/SolverSettings/storage.ts","components/SolverSettings/context.tsx","components/SolverSettings/hooks.ts","components/minesweeper/Field/hooks.ts","components/minesweeper/Field/Cell/index.tsx","components/minesweeper/Field/Row.tsx","components/minesweeper/Field/index.tsx","components/hooks/index.ts","components/minesweeper/solver.hooks.ts","components/minesweeper/Header/GameStateIndicator.tsx","components/minesweeper/Header/index.tsx","components/minesweeper/index.tsx","components/minesweeper/menu/index.tsx","components/Server/LoadingDialog.tsx","server/hooks.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["EventEmitter","handlers","Map","event","fn","this","getHandlers","Set","add","set","delete","args","forEach","setTimeout","get","GameCommandOpenRespStatus","GameCommandNewRespStatus","GameStateEnum","FieldCellMode","PersistentStorage","initial","_data","key","value","emit","prev","data","Object","keys","undefined","GameFieldSettingsStorage","cellSize","GameFieldStorageContext","React","createContext","GameFieldStorageContextComponent","props","useMemo","Provider","GameStatsService","state","open","mark","predict","markName","startGame","Date","now","stopGame","prevVal","GameStatsContext","GameStatsScope","children","gameStatsService","Button","className","useGameFieldCellSizeState","initSize","gameFieldStorage","useContext","useState","setCellSize","useEffect","on","val","saveCellSize","useCallback","size","FieldCell","x","y","bombs","mode","Blank","id","cell","setMode","applyBombs","mapCells","field","cells","copied","Opened","has","Array","from","MinesweeperGame","dispatcher","level","loading","Init","clearField","emitChangeField","setLoading","dispatch","resp","OK","updateMap","setGameState","Active","newField","update","Marked","markCellsAsOpening","Promise","all","map","then","resps","find","a","index","status","LOSE","WIN","length","lastResp","Lose","Win","message","window","localStorage","setItem","modified","rowIndex","touched","row","push","cellIndex","item","isNaN","gameState","MarkOpen","isDevMode","process","WinRegExp","SuccessResp","LoseResp","CommandServerState","measure","name","dir","server","url","CONNECTING","stream","actions","queue","busy","onOpen","setState","CONNECTED","onError","e","clearQueueWithError","onClose","CLOSED","onMessage","match","exec","group","groups","command","body","parseResp","action","shift","split","reduce","acc","Err","Error","readCommandResp","trim","next","WebSocket","addEventListener","close","removeEventListener","resolve","reject","filter","Boolean","join","concat","readyState","OPEN","send","values","cbs","clear","msg","REACT_APP_WS_URL","ServerContext","ServerProvider","MineSweeperContext","MineSweeper","mineSweeper","newGame","useMinesweeperRestart","minesweeper","resetStats","console","log","getStats","reset","useGameStatsReset","useMinesweeperFieldGetter","useMineSweeperActions","markStat","times","i","useGameStatsMark","openCell","markCell","getCell","gameField","isBlank","getCellsAround","include","top","bottom","left","right","blank","opened","marked","getBlankWithState","fieldState","c","includes","predictIsBombAroundInBlankCells","blankCount","markedCount","setProbMapWithRisk","prob","removeCellFromProbMap","lookAround","predicted","blankCells","risk","lookAtField","solveState","prevMark","prevOpen","Math","max","predictFromState","predictMap","entries","average","b","cellsSet","minProb","min","floor","random","openRandomCell","attempts","ceil","checkPredict","context","DefaultSolverSettings","stepTimeout","predictBound","selectRandomCellIfNoAnyChoice","SolverSettingsContext","useSolverSettings","gameFieldSettingsStorage","gameFieldSettings","setGameFieldSettings","getCellByElement","cellEl","td","parentElement","addClassName","condition","cellBlankClass","cellOpenedClass","cellMarkedClass","cellMarkedOpenClass","Cell","memo","displayName","TableRow","GameBody","GameField","setField","useMinesweeperField","openCells","markCells","getField","solverSettings","target","metaKey","predictedCell","preventDefault","useMineSweeperTableActions","isMetaActive","onKeydown","useMetaKeyDown","classNames","onClick","onContextMenu","useAutoSolver","solveTimerHandler","useRef","lasPredictRef","useGameStatsGetter","restart","applySolveFieldState","current","solve","randomCell","stats","clearTimeout","GameStateIndicator","useMinesweeperLoading","useMinesweeperState","GameHeader","autoSolverRunned","setAutoSolverRinned","stop","toggleAutoSolver","MIN_CELL_SIZE","MAX_CELL_SIZE","setSize","plus","minus","document","useMIneSweeperCellSizeWithControls","plusAvailable","minusAvailable","styles","fontSize","style","disabled","Menu","onSelect","start","dataset","data-level","LoadingDialog","useServerState","dialog","useLayoutEffect","showModal","ref","Game","setLevel","App","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.13d8101d.chunk.js","sourcesContent":["export type EventHandler<Args extends any[]> = (...args: Args) => void;\n\n\nexport class EventEmitter<E extends Record<string, any>> {\n\n    private handlers: Map<keyof E, Set<EventHandler<E[keyof E]>>> = new Map();\n\n    public on<Event extends keyof E>(event: Event, fn: EventHandler<E[Event]>): () => void {\n        const handlers = this.getHandlers<Event>(event) || new Set<EventHandler<E[Event]>>();\n        handlers.add(fn);\n        // @ts-ignore\n        this.handlers.set(event, handlers);\n\n        return () => {\n            const handlers = this.getHandlers(event);\n            if (handlers) {\n                handlers.delete(fn);\n            }\n        }\n\n    }\n\n    protected emit<Event extends keyof E>(event: Event, ...args: E[Event]): void {\n        const handlers = this.getHandlers(event);\n        if (handlers) {\n            handlers.forEach((fn: EventHandler<E[Event]>) => setTimeout(fn, 0, ...args));\n        }\n    }\n\n    protected getHandlers<Event extends keyof E>(event: Event): Set<EventHandler<E[Event]>> | void {\n        return this.handlers.get(event);\n    }\n\n\n}\n","import { EventEmitter } from \"../helpers/event-emitter\";\n\nexport type StorageChangeDataArgument<T> = {\n    [K in keyof T]: [T[K] | undefined]\n}\n\ntype StorageEvents<T> = {\n    change: ['']\n} & StorageChangeDataArgument<T>;\n\ntype Optional<T> = {\n    [K in keyof T]?: Required<T>[K];\n}\n\nexport class PersistentStorage<T> extends EventEmitter<StorageEvents<Required<T>>> {\n\n    public get data(): Optional<T> {\n        return this._data;\n    }\n\n    protected _data: Optional<T> = {};\n\n    constructor(initial?: Optional<T>) {\n        super();\n        if (initial) {\n            this._data = initial;\n        }\n    }\n\n    public get<K extends keyof T>(key: K): T[K] | void {\n        return this._data[key] || void 0;\n    }\n\n    public set<K extends keyof T>(key: K, value: Required<T>[K]): void {\n        this._data = { ...this._data, [key]: value };\n        // @ts-ignore\n        this.emit(key, value);\n    }\n\n    public reset(): void {\n        const prev = this.data;\n        this._data = {};\n        // @ts-ignore\n        Object.keys(prev).forEach(key => this.emit(key as keyof T, undefined));\n    }\n}\n","type Cell = string;\nexport type Row = Cell[];\nexport type RawGameField = Row[];\n\n\nexport enum GameCommandOpenRespStatus {\n    OK,\n    WIN,\n    LOSE\n}\n\nexport enum GameCommandNewRespStatus {\n    OK,\n    Err,\n}\n\nexport interface GameCommandOpenResp {\n    status: GameCommandOpenRespStatus,\n    message?: string;\n}\n\nexport interface GameCommandResp {\n    new: GameCommandNewRespStatus;\n    open: GameCommandOpenResp;\n    map: RawGameField;\n}\n\nexport interface GameCommandDispatcher {\n    dispatch<Command extends keyof GameCommandResp>(command: Command, args?: string | number): Promise<GameCommandResp[Command]>;\n\n    send(msg: string): void;\n}\n\n\n","import { EventEmitter } from \"../../helpers/event-emitter\";\nimport { GameCommandNewRespStatus, GameCommandOpenResp } from \"./dispatcher.typing\";\n\nexport type Field = FieldCell[][];\n\nexport enum GameStateEnum {\n    Init,\n    Active,\n    Win,\n    Lose\n}\n\nexport enum FieldCellMode {\n    Blank,\n    Marked,\n    Opened,\n    MarkOpen\n}\n\nexport class FieldCell {\n\n    public bombs: number | void = void 0;\n    public mode: FieldCellMode = FieldCellMode.Blank;\n\n    public readonly id: string;\n\n    constructor(\n        public readonly x: number,\n        public readonly y: number,\n    ) {\n        this.id = `${ x } ${ y }`;\n    }\n\n    public setMode(mode: FieldCellMode): FieldCell {\n        this.mode = mode;\n        return this;\n    }\n\n    public applyBombs(bombs: number): FieldCell {\n        this.bombs = bombs;\n        return this;\n    }\n\n    public update(mode: FieldCellMode, bombs?: number): FieldCell {\n        if (mode !== this.mode || bombs !== this.bombs) {\n            const cell = new FieldCell(this.x, this.y).setMode(mode);\n            if (bombs) {\n                cell.applyBombs(bombs)\n            }\n            return cell\n        }\n        return this;\n    }\n\n}\n\nexport interface MinesweeperEvents {\n    loading: [boolean],\n    changeField: [Field];\n    changeState: [GameStateEnum];\n    allOpening: [GameCommandOpenResp],\n}\n\nexport interface MineSweeperController extends EventEmitter<MinesweeperEvents> {\n\n    readonly field: Field;\n    readonly loading: boolean;\n    readonly state: GameStateEnum;\n    readonly level: number;\n\n    newGame(level: number): Promise<GameCommandNewRespStatus>;\n\n    openCell(...cells: FieldCell[]): Promise<GameCommandOpenResp>;\n\n    updateMap(): void;\n\n    markCell(...cells: FieldCell[]): void;\n\n    close(): void;\n\n}\n","import { PersistentStorage } from \"@minesweeper/Storage\";\n\nexport interface GameFieldSettings {\n    cellSize: number,\n}\n\nexport class GameFieldSettingsStorage extends PersistentStorage<GameFieldSettings> {\n    constructor() {\n        super({\n            cellSize: 7,\n        });\n    }\n}\n","import React, { ReactNode, useMemo } from \"react\";\nimport { GameFieldSettingsStorage } from \"./storage\";\n\nexport const GameFieldStorageContext = React.createContext<GameFieldSettingsStorage | null>(null);\n\nexport const GameFieldStorageContextComponent = (props: { children: ReactNode }) => {\n    const value = useMemo(() => new GameFieldSettingsStorage(), []);\n    return (\n        <GameFieldStorageContext.Provider value={ value } { ...props }/>\n    );\n}\n","import { EventEmitter } from \"../helpers/event-emitter\";\n\nexport interface GameStatsData {\n    stopGame?: number;\n    startGame?: number;\n    open?: number;\n    mark?: number;\n    predict?: number;\n}\n\nexport interface GameStateEvents {\n    change: [GameStatsData]\n}\n\nexport type MarkTypes = keyof GameStatsData;\n\nexport class GameStatsService extends EventEmitter<GameStateEvents> {\n\n    protected state: GameStatsData = {\n        open: 0,\n        mark: 0,\n        predict: 0,\n    };\n\n    public getStats(): GameStatsData {\n        return this.state;\n    }\n\n    public reset(): void {\n        this.state = {\n            open: 0,\n            mark: 0,\n            predict: 0,\n        };\n    }\n\n    public mark(markName: MarkTypes): void {\n        switch (markName) {\n            case \"startGame\":\n                if (!this.state.startGame) {\n                    this.state.startGame = Date.now();\n                }\n                break;\n            case \"stopGame\":\n                if (!this.state.stopGame) {\n                    this.state.stopGame = Date.now();\n                }\n                break;\n            default:\n                const prevVal = this.state[markName] || 0;\n                this.state[markName] = prevVal + 1;\n        }\n        this.emit(\"change\", this.state);\n    }\n}\n","import { GameStatsService } from \"@minesweeper/Stats\";\nimport React, { ReactNode, useMemo } from \"react\";\n\nexport const GameStatsContext = React.createContext<GameStatsService | void>(void 0);\n\nexport const GameStatsScope = ({ children }: { children: ReactNode }) => {\n    const gameStatsService = useMemo(() => new GameStatsService(), []);\n    return (\n        <GameStatsContext.Provider value={ gameStatsService }>\n            { children }\n        </GameStatsContext.Provider>\n    )\n};\n","import React from \"react\";\nimport './index.scss';\n\nexport const Button = (props: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>) => (\n    <button { ...props } className={ `minesweeper-button ${ props.className }` }/>\n);\n","import { useCallback, useContext, useEffect, useState } from \"react\";\nimport { GameFieldStorageContext } from \"./context\";\n\n\nexport const useGameFieldCellSizeState = (initSize: number = 7): [number, (size: number) => void] => {\n    const gameFieldStorage = useContext(GameFieldStorageContext);\n    const [cellSize, setCellSize] = useState<number>((gameFieldStorage && gameFieldStorage.get(\"cellSize\")) || initSize);\n    useEffect(() => {\n        if (gameFieldStorage) {\n            return gameFieldStorage.on(\"cellSize\", (val: number | undefined) => {\n                setCellSize(val || initSize);\n            });\n        }\n    }, [gameFieldStorage, setCellSize, initSize]);\n    const saveCellSize = useCallback((size: number) => {\n        gameFieldStorage && gameFieldStorage.set(\"cellSize\", size);\n    }, [gameFieldStorage]);\n    return [cellSize, saveCellSize];\n};\n","import { EventEmitter } from \"../../helpers/event-emitter\";\nimport {\n    GameCommandDispatcher,\n    GameCommandNewRespStatus,\n    GameCommandOpenResp,\n    GameCommandOpenRespStatus\n} from \"./dispatcher.typing\";\nimport { Field, FieldCell, FieldCellMode, GameStateEnum, MineSweeperController, MinesweeperEvents } from \"./typing\";\n\n\nfunction mapCells(field: Field, cells: FieldCell[], fn: (cell: FieldCell) => FieldCell): Field {\n    let copied = new Set();\n    cells.forEach((cell) => {\n        if (cell.mode !== FieldCellMode.Opened) {\n            field[cell.y][cell.x] = fn(cell);\n            if (!copied.has(cell.y)) {\n                field[cell.y] = Array.from(field[cell.y]);\n                copied.add(cell.y);\n            }\n        }\n    });\n    if (copied.size) {\n        return Array.from(field);\n    }\n    return field;\n}\n\nexport class MinesweeperGame extends EventEmitter<MinesweeperEvents> implements MineSweeperController {\n\n    public level: number = 0;\n    public field: Field = [];\n    public loading: boolean = false;\n    public state: GameStateEnum = GameStateEnum.Init;\n\n    constructor(\n        private dispatcher: GameCommandDispatcher,\n    ) {\n        super();\n    }\n\n    public async newGame(level: number): Promise<GameCommandNewRespStatus> {\n        if (level !== this.level) {\n            this.field = []\n        } else {\n            this.clearField();\n        }\n        this.emitChangeField();\n        this.level = level;\n        this.setLoading(true);\n        const resp = await this.dispatcher.dispatch('new', level);\n        if (resp === GameCommandNewRespStatus.OK) {\n            await this.updateMap();\n            this.setGameState(GameStateEnum.Active);\n        }\n        this.setLoading(false);\n        return resp;\n    }\n\n    public markCell(...cells: FieldCell[]): void {\n        const newField = mapCells(this.field, cells, (cell: FieldCell) => {\n            if (cell.mode !== FieldCellMode.Opened) {\n                return cell.update(cell.mode === FieldCellMode.Blank ? FieldCellMode.Marked : FieldCellMode.Blank);\n            }\n            return cell;\n        });\n        if (newField !== this.field) {\n            this.emitChangeField();\n        }\n    }\n\n    public close(): void {\n        this.setGameState(GameStateEnum.Init);\n    }\n\n    public async openCell(...cells: FieldCell[]): Promise<GameCommandOpenResp> {\n        this.setLoading(true);\n        this.markCellsAsOpening(cells);\n        let lastResp = await Promise.all(\n            cells.map((cell) => this.dispatcher.dispatch(\"open\", cell.id))\n        )\n            .then((resps) => {\n                return resps.find((a, index) => {\n                    switch (a.status) {\n                        case GameCommandOpenRespStatus.LOSE:\n                        case GameCommandOpenRespStatus.WIN:\n                            return true;\n                    }\n                    return false;\n                }) || resps[resps.length - 1];\n            })\n            .then((lastResp) => {\n                switch (lastResp.status) {\n                    case GameCommandOpenRespStatus.LOSE:\n                        this.setGameState(GameStateEnum.Lose);\n                        break;\n                    case GameCommandOpenRespStatus.WIN:\n                        this.setGameState(GameStateEnum.Win);\n                        if (lastResp.message) {\n                            window.localStorage.setItem(`level-${ this.level }`, lastResp.message);\n                        }\n                        break;\n                }\n                return lastResp;\n            });\n        await this.updateMap();\n        this.setLoading(false);\n        return lastResp;\n    }\n\n    public async updateMap(): Promise<void> {\n        this.setLoading(true);\n        const map = await this.dispatcher.dispatch(\"map\");\n        if (map) {\n            let modified = false;\n            for (let rowIndex = 0; rowIndex < map.length; rowIndex++) {\n                let touched = false;\n                let row = this.field[rowIndex];\n                if (!row) {\n                    row = [];\n                    this.field.push(row);\n                }\n                for (let cellIndex = 0; cellIndex < map[rowIndex].length; cellIndex++) {\n                    const value = map[rowIndex][cellIndex];\n                    if (!row[cellIndex]) {\n                        row.push(new FieldCell(cellIndex, rowIndex));\n                        modified = true;\n                    } else {\n                        let item = row[cellIndex];\n                        const bombs = +value;\n                        if (item.mode === FieldCellMode.Marked) {\n                            if (!isNaN(bombs)) {\n                                item = item.update(FieldCellMode.Opened, bombs);\n                            }\n                        } else {\n                            item = item.update(isNaN(bombs) ? FieldCellMode.Blank : FieldCellMode.Opened, isNaN(bombs) ? void 0 : bombs);\n                        }\n                        if (item !== row[cellIndex]) {\n                            touched = true;\n                        }\n                        row[cellIndex] = item;\n                    }\n                }\n                if (touched) {\n                    this.field[rowIndex] = Array.from(row);\n                    modified = true;\n                }\n            }\n            // const newField = map.reduce((acc: Field, item: string[], rowIndex) => {\n            //     let touched = false;\n            //     let row = acc[rowIndex];\n            //     if (!row) {\n            //         row = [];\n            //         acc.push(row);\n            //     }\n            //     item.forEach((value: string, cellIndex: number) => {\n            //         if (!row[cellIndex]) {\n            //             row.push(new FieldCell(cellIndex, rowIndex));\n            //             modified = true;\n            //         } else {\n            //             let item = row[cellIndex];\n            //             const bombs = +value;\n            //             if (item.mode === FieldCellMode.Marked) {\n            //                 if (!isNaN(bombs)) {\n            //                     item = item.update(FieldCellMode.Opened, bombs);\n            //                 }\n            //             } else {\n            //                 item = item.update(isNaN(bombs) ? FieldCellMode.Blank : FieldCellMode.Opened, isNaN(bombs) ? void 0 : bombs);\n            //             }\n            //             if (item !== row[cellIndex]) {\n            //                 touched = true;\n            //             }\n            //             row[cellIndex] = item;\n            //         }\n            //     });\n            //     if (touched) {\n            //         acc[rowIndex] = Array.from(row);\n            //         modified = true;\n            //     }\n            //     return acc;\n            // }, this.field);\n            this.setLoading(false);\n            if (modified) {\n                this.field = Array.from(this.field);\n                this.emitChangeField();\n            }\n        }\n    }\n\n    protected setLoading(loading: boolean): void {\n        if (this.loading !== loading) {\n            this.loading = loading;\n            this.emit(\"loading\", this.loading);\n        }\n    }\n\n    protected setGameState(gameState: GameStateEnum): void {\n        if (this.state !== gameState) {\n            this.state = gameState;\n            this.emit(\"changeState\", this.state);\n        }\n    }\n\n    private emitChangeField(): void {\n        this.emit(\"changeField\", this.field);\n    }\n\n    private clearField(): void {\n        this.field = this.field.map((row) => {\n            return row.map((cell) => cell.update(FieldCellMode.Blank))\n        });\n    }\n\n    private markCellsAsOpening(cells: FieldCell[]): void {\n        mapCells(this.field, cells, (cell) => cell.update(FieldCellMode.MarkOpen));\n        this.emit(\"changeField\", Array.from(this.field));\n    }\n\n}\n","export const isDevMode = () => process.env.NODE_ENV === 'development';\n","import {\n    GameCommandNewRespStatus,\n    GameCommandOpenResp,\n    GameCommandOpenRespStatus,\n    GameCommandResp,\n    Row\n} from \"../game/dispatcher.typing\";\n\ntype RegExpRepGroup = Record<'command' | 'body', string>;\n\nconst WinRegExp = /^You win\\. The password for this level is: (.*)/;\nconst SuccessResp = 'OK';\nconst LoseResp = \"You lose\";\n\nexport function parseResp<E extends keyof GameCommandResp>(data: string): [E, string] | void {\n    const match = /^(?<command>\\w+):[\\s\\n]?(?<body>(.*|\\n+)+)$/.exec(data);\n    if (match) {\n        const group = match.groups as RegExpRepGroup;\n        const command = group.command as E;\n        const body = group.body;\n        return [command, body];\n    }\n}\n\nexport function readCommandResp<Command extends keyof GameCommandResp>(command: Command, data: string): GameCommandResp[Command] {\n    switch (command) {\n        case \"map\":\n            return data\n                .split('\\n')\n                .reduce((acc: Row[], row: string) => {\n                    if (row.length > 1) {\n                        acc.push(row.split('') as Row);\n                    }\n                    return acc;\n                }, []) as GameCommandResp[Command];\n        case \"new\":\n            if (data === SuccessResp) {\n                return GameCommandNewRespStatus.OK as GameCommandResp[Command];\n            }\n            return GameCommandNewRespStatus.Err as GameCommandResp[Command];\n        case \"open\":\n            switch (data) {\n                case SuccessResp:\n                    return {\n                        status: GameCommandOpenRespStatus.OK,\n                    } as GameCommandOpenResp as GameCommandResp[Command];\n                case LoseResp:\n                    return {\n                        status: GameCommandOpenRespStatus.LOSE,\n                    } as GameCommandOpenResp as GameCommandResp[Command];\n            }\n            const match = data.match(WinRegExp);\n            if (match) {\n                return {\n                    status: GameCommandOpenRespStatus.WIN,\n                    message: match[1]\n                } as GameCommandOpenResp as GameCommandResp[Command];\n            }\n\n    }\n    throw new Error(\"Unknown response \" + data);\n}\n\nconst DIVIDER = ' ';\nexport const concat = <T extends { toString(): string } | undefined | null>(...args: T[]): string => {\n    return args\n        .filter(Boolean)\n        .join(DIVIDER);\n};\n\n\nexport const getCommand = (data: string): string => {\n    return data.split(DIVIDER)[0];\n}\n","import { GameCommandDispatcher, GameCommandResp } from \"@minesweeper/game\";\nimport { isDevMode } from \"../../../helpers/is_dev_mode\";\nimport { EventEmitter } from \"../../helpers/event-emitter\";\nimport { concat, getCommand, parseResp, readCommandResp } from \"./helpers\";\nimport { ErrorHandler, MessageHandler } from \"./typing\";\n\nexport enum CommandServerState {\n    CONNECTED,\n    CLOSED,\n    CONNECTING\n}\n\n\ninterface CommandServerEvents {\n    change: [CommandServerState]\n}\n\n/**\n * Implement abstract server with WebSocket as way to send and get data\n * */\nexport class CommandServer extends EventEmitter<CommandServerEvents> implements GameCommandDispatcher {\n\n    public state: CommandServerState = CommandServerState.CONNECTING;\n\n    private stream: WebSocket | undefined;\n    private actions: Map<keyof GameCommandResp, [MessageHandler, ErrorHandler][]> = new Map();\n    private queue: string[] = [];\n    private busy: boolean = false;\n\n    constructor(url: string) {\n        super();\n        this.stream = new WebSocket(url);\n        this.stream.addEventListener(\"open\", this.onOpen);\n        this.stream.addEventListener('message', this.onMessage);\n        this.stream.addEventListener(\"error\", this.onError);\n        this.stream.addEventListener(\"close\", this.onClose);\n    }\n\n    public close(): void {\n        if (this.stream && this.state !== CommandServerState.CLOSED) {\n            this.stream.close();\n            this.stream.removeEventListener(\"open\", this.onOpen);\n            this.stream.removeEventListener('message', this.onMessage);\n            this.stream.removeEventListener(\"error\", this.onError);\n            this.stream.removeEventListener(\"close\", this.onClose);\n        }\n    }\n\n    public dispatch<Command extends keyof GameCommandResp>(command: Command, args?: string | number): Promise<GameCommandResp[Command]> {\n        return new Promise((resolve, reject) => {\n            this.queue.push(concat(command, args));\n            const actions = this.actions.get(command) || [];\n            actions.push([resolve as MessageHandler, reject]);\n            this.actions.set(command, actions);\n            this.next();\n        });\n    }\n\n    protected setState(state: CommandServerState): void {\n        if (this.state !== state) {\n            this.state = state;\n            this.emit(\"change\", this.state);\n        }\n    }\n\n    protected onOpen = (): void => {\n        this.setState(CommandServerState.CONNECTED);\n    };\n\n    protected onError = (e: Event) => this.clearQueueWithError(e);\n\n    protected onClose = (e: CloseEvent) => {\n        this.clearQueueWithError(e);\n        this.setState(CommandServerState.CLOSED);\n    };\n\n    protected onMessage = (e: MessageEvent): void => {\n        const resp = parseResp(e.data);\n        if (resp) {\n            const [command, body] = resp;\n            measure(command, \"end\");\n            const actions = this.actions.get(command);\n            if (actions && actions.length) {\n                const action = actions.shift();\n                if (action) {\n                    const resp = readCommandResp(command, (body as string).trim());\n                    action[0](resp);\n                }\n            }\n        }\n        this.next();\n    };\n\n    public send(command: string): void {\n        if (this.stream && this.stream.readyState === WebSocket.OPEN) {\n            const name = getCommand(command);\n            measure(name, \"start\");\n            return this.stream.send(command);\n        }\n    }\n\n    protected clearQueueWithError(e: Event | CloseEvent): void {\n        Array.from(this.actions.values())\n            .forEach((cbs) => {\n                cbs.forEach(([_resolve, reject]) => reject(e))\n            });\n        this.queue.length = 0;\n        this.actions.clear();\n        this.busy = false;\n    }\n\n    protected next(): void {\n        if (!this.busy && this.queue.length) {\n            const msg = this.queue.shift() as string;\n            this.send(msg as keyof GameCommandResp);\n        } else {\n            this.busy = false;\n        }\n    }\n\n}\n\n\nfunction measure(name: string, dir?: 'start' | 'end'): void {\n    if (!isDevMode()) {\n        if (dir) {\n            // performance.mark(`${ name }_${ dir }`);\n        }\n        if (!dir || dir === 'end') {\n            // performance.measure(name, `${ name }_start`, `${ name }_end`);\n        }\n    }\n}\n","interface ENVIRONMENT extends NodeJS.ProcessEnv {\n    NODE_ENV: 'development' | 'production' | 'test',\n    REACT_APP_WS_URL: string,\n}\n\nconst ENV = process.env as ENVIRONMENT;\n\nexport const WS_SERVER: string = ENV.REACT_APP_WS_URL;\n","import { CommandServer } from \"@minesweeper/server\";\nimport React, { ReactNode } from \"react\";\nimport { WS_SERVER } from \"../helpers/env\";\n\n// TODO: use env to get ws url\nconst server = new CommandServer(WS_SERVER);\n\nexport const ServerContext = React.createContext(server);\n\nexport const ServerProvider = ({ children }: { children: ReactNode }) => {\n    return (\n        <ServerContext.Provider value={ server }>\n            { children }\n        </ServerContext.Provider>\n    )\n};\n","import { MineSweeperController, MinesweeperGame } from \"@minesweeper/game\";\nimport React, { ReactNode, useContext, useEffect, useMemo } from \"react\";\nimport { ServerContext } from \"../../../server/context\";\n\nexport const MineSweeperContext = React.createContext<MineSweeperController | void>(void 0);\n\nexport const MineSweeper = ({ children, level }: { children: ReactNode, level: number }) => {\n    const server = useContext(ServerContext);\n    const mineSweeper = useMemo(() => new MinesweeperGame(server), [server]);\n    useEffect(() => {\n        if (level >= 0 && mineSweeper) {\n            mineSweeper.newGame(level);\n        }\n    }, [level, mineSweeper]);\n    return (\n        <MineSweeperContext.Provider value={ mineSweeper }>\n            { children }\n        </MineSweeperContext.Provider>\n    )\n};\n","import {\n    Field,\n    FieldCell,\n    GameCommandNewRespStatus,\n    GameCommandOpenRespStatus,\n    GameStateEnum,\n    MineSweeperController\n} from \"@minesweeper/game\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport { useGameStatsMark, useGameStatsReset } from \"../../GameStats/hooks\";\nimport { MineSweeperContext } from \"./context\";\n\nexport const useMinesweeperState = (): GameStateEnum => {\n    const minesweeper = useContext(MineSweeperContext);\n    const [state, setState] = useState((minesweeper && minesweeper.state) || GameStateEnum.Init);\n    useEffect(() => {\n        if (minesweeper) {\n            return minesweeper.on(\"changeState\", setState);\n        }\n    }, [minesweeper]);\n    return state;\n};\n\nexport const useMinesweeperLoading = (): boolean => {\n    const minesweeper = useContext(MineSweeperContext);\n    const [loading, setLoading] = useState((minesweeper && minesweeper.loading) || false);\n    useEffect(() => {\n        if (minesweeper) {\n            return minesweeper.on(\"loading\", setLoading);\n        }\n    }, [minesweeper]);\n    return loading;\n};\n\nexport const useMinesweeperRestart = (): () => Promise<GameCommandNewRespStatus> => {\n    const minesweeper = useContext(MineSweeperContext);\n    const resetStats = useGameStatsReset();\n    return useCallback(() => {\n        if (minesweeper) {\n            resetStats();\n            return minesweeper.newGame(minesweeper.level);\n        }\n        return Promise.reject(new Error('Minesweeper controller is not exist'));\n    }, [minesweeper, resetStats])\n};\n\nexport function useMinesweeperField(): Field {\n    const mineSweeper = useContext(MineSweeperContext);\n    const [field, setField] = useState((mineSweeper && mineSweeper.field) || []);\n    useEffect(() => {\n        if (mineSweeper) {\n            return mineSweeper.on(\"changeField\", setField);\n        }\n    }, [mineSweeper]);\n\n    return field;\n}\n\nexport const useMinesweeperFieldGetter = (): () => Field => {\n    const mineSweeper = useContext(MineSweeperContext);\n    return useCallback(() => {\n        return (mineSweeper as MineSweeperController).field;\n    }, [mineSweeper]);\n};\n\nexport type OpenCellsFn = (cells: FieldCell[]) => ReturnType<MineSweeperController['openCell']>;\nexport type MarkCellsFn = (cells: FieldCell[]) => ReturnType<MineSweeperController['markCell']>;\n\nexport const useMineSweeperActions = (): [OpenCellsFn, MarkCellsFn] => {\n    const mineSweeper = useContext(MineSweeperContext);\n    const markStat = useGameStatsMark();\n\n    const open = useCallback((cells: FieldCell[]) => {\n        if (mineSweeper && cells.length) {\n            markStat(\"startGame\");\n            markStat(\"open\", cells.length);\n            return mineSweeper.openCell(...cells)\n                .then((resp) => {\n                    if (resp.status !== GameCommandOpenRespStatus.OK) {\n                        markStat(\"stopGame\");\n                    }\n                    return resp;\n                })\n        }\n        return Promise.resolve({ status: GameCommandOpenRespStatus.OK });\n    }, [mineSweeper, markStat]) as OpenCellsFn;\n\n    const mark = useCallback((cells: FieldCell[]) => {\n        if (mineSweeper && cells.length) {\n            markStat(\"startGame\");\n            markStat(\"mark\", cells.length);\n            mineSweeper.markCell(...cells);\n        }\n    }, [mineSweeper, markStat]) as MarkCellsFn;\n\n    return [open, mark];\n};\n","import { GameStatsData, MarkTypes } from \"@minesweeper/Stats\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport { GameStatsContext } from \"./context\";\n\nexport const useGameStatsMark = (): (markName: MarkTypes, times?: number) => void => {\n    const gameStatsService = useContext(GameStatsContext);\n    return useCallback((name: MarkTypes, times: number = 1) => {\n        if (gameStatsService) {\n            for (let i = 0; i < times; i++) {\n                gameStatsService.mark(name);\n            }\n        }\n    }, [gameStatsService]);\n};\n\nexport const useGameStatsReset = (): () => void => {\n    const gameStatsService = useContext(GameStatsContext);\n    return useCallback(() => {\n        if (gameStatsService) {\n            console.log(gameStatsService.getStats());\n            gameStatsService.mark(\"stopGame\");\n            gameStatsService.reset();\n        }\n    }, [gameStatsService]);\n};\n\nexport const useGameStatsGetter = () => {\n    const gameStatsService = useContext(GameStatsContext);\n    return useCallback(() => {\n        return gameStatsService && gameStatsService.getStats();\n    }, [gameStatsService]);\n};\n\nexport const useGameStatsData = <K extends keyof GameStatsData>(name: K): GameStatsData[K] | void => {\n    const gameStatsService = useContext(GameStatsContext);\n    const [value, setValue] = useState(gameStatsService && gameStatsService.getStats()[name]);\n    useEffect(() => {\n        if (gameStatsService) {\n            return gameStatsService.on(\"change\", (data) => {\n                setValue(data[name]);\n            })\n        }\n    });\n    return value;\n};\n","import { Field, FieldCell, FieldCellMode } from \"@minesweeper/game\";\n\nconst getCell = (gameField: Field, x: number, y: number): FieldCell | void => (gameField[y] && gameField[y][x]) || void 0;\nconst isBlank = (gameField: Field, x: number, y: number): boolean => {\n    const cell = getCell(gameField, x, y);\n    return !!cell && cell.mode === FieldCellMode.Blank;\n};\n\ninterface CellsAround {\n    marked: FieldCell[],\n    opened: FieldCell[],\n    blank: FieldCell[],\n}\n\nfunction getCellsAround(field: Field, x: number, y: number, include?: boolean): CellsAround {\n    const top = y - 1;\n    const bottom = y + 1;\n    const left = x - 1;\n    const right = x + 1;\n    return [\n        include && getCell(field, x, y),\n        getCell(field, left, top),\n        getCell(field, x, top),\n        getCell(field, right, top),\n        getCell(field, left, y),\n        getCell(field, right, y),\n        getCell(field, left, bottom),\n        getCell(field, right, bottom),\n        getCell(field, x, bottom),\n    ]\n        .reduce((acc: CellsAround, item: FieldCell | void | false) => {\n            if (item) {\n                switch (item.mode) {\n                    case FieldCellMode.Blank:\n                        acc.blank.push(item);\n                        break;\n                    case FieldCellMode.Opened:\n                        acc.opened.push(item);\n                        break;\n                    case FieldCellMode.Marked:\n                        acc.marked.push(item);\n                        break;\n                }\n            }\n            return acc;\n        }, { marked: [], opened: [], blank: [] });\n}\n\nexport interface SolveFieldState {\n    mark: FieldCell[],\n    open: FieldCell[],\n    predict?: Map<FieldCell, number[]>,\n}\n\nfunction getBlankWithState(cells: FieldCell[], fieldState: SolveFieldState): FieldCell[] {\n    return cells.filter(c => !fieldState.mark.includes(c) && !fieldState.open.includes(c));\n}\n\nfunction predictIsBombAroundInBlankCells(\n    field: Field,\n    cell: FieldCell,\n    fieldState: SolveFieldState,\n): number {\n    if (cell.bombs) {\n        const { marked, blank } = getCellsAround(field, cell.x, cell.y);\n        const blankCount = getBlankWithState(blank, fieldState).length;\n        const markedCount = marked.length + blank.filter((i) => fieldState.mark.includes(i)).length;\n        if (blankCount) {\n            return (cell.bombs - markedCount) / blankCount;\n        }\n    }\n    return -1;\n}\n\nfunction setProbMapWithRisk(map: Required<SolveFieldState>['predict'], cells: FieldCell[], prob: number): void {\n    cells.forEach((c) => {\n        const prev = map.get(c) || [];\n        if (!prev.includes(prob)) {\n            prev.push(prob);\n        }\n        map.set(c, prev);\n    })\n}\n\nfunction removeCellFromProbMap(map: Required<SolveFieldState>['predict'], cells: FieldCell[]): void {\n    cells.forEach((c) => map.delete(c));\n}\n\nexport function lookAround(field: Field, x: number, y: number, fieldState: SolveFieldState = {\n    mark: [],\n    open: [],\n    predict: new Map()\n}): SolveFieldState {\n    const groups = getCellsAround(field, x, y, true);\n    const predicted = new Set();// set of cells which already used for predict\n    if (groups.opened.length) {\n        for (let i = 0; i < groups.opened.length; i++) {\n            const cell = groups.opened[i];\n            if (!predicted.has(cell) && cell.bombs) {\n                const groups1 = getCellsAround(field, cell.x, cell.y);\n                const blankCells = getBlankWithState(groups1.blank, fieldState);\n                if (!blankCells.length) continue;\n\n                const risk = predictIsBombAroundInBlankCells(field, cell, fieldState);\n                if (risk >= 0) {\n                    let touched = false;\n                    switch (risk) {\n                        case 0:\n                            fieldState.open.push(...blankCells);\n                            fieldState.predict && removeCellFromProbMap(fieldState.predict, blankCells);\n                            predicted.add(cell);\n                            touched = true;\n                            break;\n                        case 1:\n                            fieldState.mark.push(...blankCells);\n                            fieldState.predict && removeCellFromProbMap(fieldState.predict, blankCells);\n                            predicted.add(cell);\n                            touched = true;\n                            break;\n                        default:\n                            if (fieldState.predict) {\n                                setProbMapWithRisk(fieldState.predict, blankCells, risk);\n                            }\n                    }\n                    if (touched) {\n                        i = 0 - 1; // repeat\n                    }\n                }\n            }\n        }\n    }\n    return fieldState;\n}\n\nexport function lookAtField(field: Field, solveState: SolveFieldState = {\n    mark: [],\n    open: [],\n    predict: new Map(),\n}): SolveFieldState {\n    for (let rowIndex = 1; rowIndex < field.length; rowIndex += 2) {\n        if (field[rowIndex]) {\n            for (let cellIndex = 1; cellIndex < field[rowIndex].length; cellIndex += 2) {\n                let prevMark = solveState.mark.length;\n                let prevOpen = solveState.open.length;\n                lookAround(field, cellIndex, rowIndex, solveState);\n                if (prevMark !== solveState.mark.length || prevOpen !== solveState.open.length) {\n                    rowIndex = Math.max(1, rowIndex - 4);\n                    break;\n                }\n            }\n        }\n    }\n\n    return solveState;\n}\n\n\nexport function predictFromState(predictMap: Required<SolveFieldState>['predict'], field?: Field, maxProb: number = 1): FieldCell | void {\n    let items = Array.from(predictMap.entries());\n    const groups = items.reduce((acc: Map<number, FieldCell[]>, [cell, prob]) => {\n        const average = prob.reduce((a, b) => a + b) / prob.length;\n        const cellsSet = acc.get(average) || [];\n        cellsSet.push(cell);\n        acc.set(average, cellsSet);\n        return acc;\n    }, new Map());\n\n    const minProb = Math.min(...Array.from(groups.keys()));\n    const cells = groups.get(minProb) as FieldCell[];\n\n    return cells[Math.floor(Math.random() * cells.length)];\n}\n\nexport function openRandomCell(field: Field): FieldCell | void {\n    let attempts = 0;\n    while (attempts <= field.length * 2) {\n        attempts++;\n        const x = Math.ceil(Math.random() * field.length);\n        const y = Math.ceil(Math.random() * field[0].length);\n        if (isBlank(field, x, y)) {\n            return getCell(field, x, y) as FieldCell;\n        }\n    }\n    for (let row = 0; row < field.length; row++) {\n        for (let cell = 0; cell < field[row].length; cell++) {\n            if (isBlank(field, cell, row)) {\n                return getCell(field, cell, row) as FieldCell;\n            }\n        }\n    }\n    // TODO: Theoretically unreachable branch, because until we not win we have at least two blank cells\n    return void 0;\n}\n\n\nexport function checkPredict(field: Field, predict: Required<SolveFieldState>['predict']): SolveFieldState {\n    const context = {\n        open: [],\n        mark: [],\n        predict: new Map(),\n    };\n    predict.forEach((a, cell) => {\n        lookAround(field, cell.x, cell.y, context);\n    });\n    return context;\n}\n\n\n","import { PersistentStorage } from \"@minesweeper/Storage\";\n\nexport interface SolverSettings {\n    stepTimeout?: number;\n    predictBound?: number;\n    selectRandomCellIfNoAnyChoice?: boolean;\n}\n\nexport const DefaultSolverSettings = {\n    stepTimeout: 10,\n    predictBound: 0.7,\n    selectRandomCellIfNoAnyChoice: true,\n};\n\nexport class SolverSettingsStorage extends PersistentStorage<SolverSettings> {\n\n    constructor(initial: Partial<SolverSettings> = {}) {\n        super({\n            ...DefaultSolverSettings,\n            ...initial,\n        });\n    }\n\n}\n","import React, { ReactNode, useMemo } from \"react\";\nimport { SolverSettingsStorage } from \"./storage\";\n\nexport const SolverSettingsContext = React.createContext<SolverSettingsStorage | void>(void 0);\n\nexport const SolverSettingsScope = ({ children }: { children: ReactNode }) => {\n    const solverSettingsStorage = useMemo(() => new SolverSettingsStorage(), []);\n    return (\n        <SolverSettingsContext.Provider value={ solverSettingsStorage }>\n            { children }\n        </SolverSettingsContext.Provider>\n    );\n};\n","import { useContext, useEffect, useState } from \"react\";\nimport { SolverSettingsContext } from \"./context\";\nimport { DefaultSolverSettings, SolverSettings } from \"./storage\";\n\nexport const useSolverSettings = (): SolverSettings => {\n    const gameFieldSettingsStorage = useContext(SolverSettingsContext);\n    const [gameFieldSettings, setGameFieldSettings] = useState((gameFieldSettingsStorage && gameFieldSettingsStorage.data) || DefaultSolverSettings);\n    useEffect(() => {\n        if (gameFieldSettingsStorage) {\n            return gameFieldSettingsStorage.on('change', () => {\n                setGameFieldSettings(gameFieldSettingsStorage.data);\n            })\n        }\n    });\n    return gameFieldSettings;\n};\n","import { Field, FieldCell } from \"@minesweeper/game\";\nimport { lookAround, predictFromState } from \"@minesweeper/solver\";\nimport { MouseEvent, useCallback, useMemo } from \"react\";\nimport { useSolverSettings } from \"../../SolverSettings/hooks\";\nimport { useMineSweeperActions, useMinesweeperFieldGetter } from \"../hooks\";\n\nfunction getCellByElement(minesweeper: Field, cellEl: EventTarget): FieldCell | void {\n    const td = cellEl as HTMLTableDataCellElement;\n    const x = td.cellIndex;\n    const y = (td.parentElement as HTMLTableRowElement).rowIndex;\n    return minesweeper[y][x];\n}\n\nexport const useMineSweeperTableActions = () => {\n    const [openCells, markCells] = useMineSweeperActions();\n    const getField = useMinesweeperFieldGetter();\n    const solverSettings = useSolverSettings();\n\n    const open = useCallback((e: MouseEvent<HTMLElement>) => {\n        const cell = getCellByElement(getField(), e.target);\n        if (cell) {\n            if (e.metaKey) {\n                const { mark, open, predict } = lookAround(getField(), cell.x, cell.y);\n                if (mark.length) {\n                    markCells(mark);\n                }\n                if (open.length) {\n                    openCells(open);\n                } else if (predict && predict.size) {\n                    const predictedCell = predict && predictFromState(predict, getField(), solverSettings.predictBound);\n                    if (predictedCell) {\n                        openCells([predictedCell]);\n                    }\n                }\n            } else {\n                openCells([cell]);\n            }\n        }\n    }, [openCells, markCells, getField, solverSettings.predictBound]);\n\n    const mark = useCallback((e: MouseEvent<HTMLElement>) => {\n        const cell = getCellByElement(getField(), e.target);\n        cell && markCells([cell]);\n        e.preventDefault();\n    }, [markCells, getField]);\n\n    return useMemo(() => [open, mark], [open, mark])\n};\n","import { FieldCell, FieldCellMode } from \"@minesweeper/game\";\nimport React, { memo, useMemo } from \"react\";\nimport './index.css';\n\nconst addClassName = (className: string) => (condition: boolean): string => {\n    return condition ? ' ' + className : ''\n};\nconst cellBlankClass = addClassName('mine-cell--blank');\nconst cellOpenedClass = addClassName('mine-cell--opened');\nconst cellMarkedClass = addClassName('mine-cell--marked');\nconst cellMarkedOpenClass = addClassName('mine-cell--marked-open');\nconst cellColor = (bombs: number | void) => {\n    if (bombs >= 0 && bombs <= 4) {\n        return `mine-cell--color-${ bombs }`;\n    }\n    return '';\n};\n\ninterface GridCellProps {\n    cell: FieldCell,\n}\n\nexport const Cell = memo(({ cell }: GridCellProps) => {\n    const className = useMemo(() => {\n        return [\n            'mine-field__cell mine-cell',\n            cellBlankClass(cell.mode === FieldCellMode.Blank),\n            cellOpenedClass(cell.mode === FieldCellMode.Opened),\n            cellMarkedClass(cell.mode === FieldCellMode.Marked),\n            cellMarkedOpenClass(cell.mode === FieldCellMode.MarkOpen),\n            cellColor(cell.bombs),\n        ].join(' ');\n    }, [cell.mode, cell.bombs]);\n    return (\n        <td className={ className }>\n            { cell.bombs ? cell.bombs : void 0 }\n        </td>\n    )\n});\nCell.displayName = 'Field Cell';\n\n\n","import { FieldCell } from \"@minesweeper/game\";\nimport React, { memo } from \"react\";\nimport { Cell } from \"./Cell\";\n\nexport const TableRow = memo(({ row }: { row: FieldCell[] }) => {\n    return (\n        <tr>\n            {\n                row.map((cell) => (<Cell key={ cell.id } cell={ cell }/>))\n            }\n        </tr>\n    )\n});\nTableRow.displayName = 'Field Row';\n","import { Field, FieldCell } from \"@minesweeper/game\";\nimport React, { memo, useMemo } from \"react\";\nimport { useMetaKeyDown } from \"../../hooks\";\nimport { useMinesweeperField } from \"../hooks\";\nimport { useMineSweeperTableActions } from \"./hooks\";\nimport './index.scss';\nimport { TableRow } from \"./Row\";\n\n\nconst GameBody = memo(({ field }: { field: Field }) => {\n    return (\n        <>\n            {\n                field.map((row: FieldCell[], index: number) => <TableRow row={ row } key={ index }/>)\n            }\n        </>\n    )\n});\n\nexport const GameField = () => {\n    const field = useMinesweeperField();\n    const [open, mark] = useMineSweeperTableActions();\n    const isMetaActive = useMetaKeyDown();\n    const classNames = useMemo(() => `table ${ isMetaActive ? 'table-auto' : '' }`, [isMetaActive]);\n    return (\n        <table className={ classNames } onClick={ open } onContextMenu={ mark }>\n            <tbody>\n            <GameBody field={ field }/>\n            </tbody>\n        </table>\n    )\n};\n","import { useEffect, useState } from \"react\";\n\nexport const useMetaKeyDown = (): boolean => {\n    const [state, setState] = useState(false);\n    useEffect(() => {\n        const onKeydown = (e: KeyboardEvent) => setState(e.metaKey);\n        window.addEventListener('keydown', onKeydown);\n        window.addEventListener('keyup', () => setState(false));\n        return () => window.removeEventListener('keydown', onKeydown);\n    }, []);\n    return state;\n};\n","import { GameCommandOpenResp, GameCommandOpenRespStatus } from \"@minesweeper/game\";\nimport { checkPredict, lookAtField, openRandomCell, predictFromState, SolveFieldState } from \"@minesweeper/solver\";\nimport { useCallback, useRef } from \"react\";\nimport { useGameStatsGetter } from \"../GameStats/hooks\";\nimport { useSolverSettings } from \"../SolverSettings/hooks\";\nimport { useMineSweeperActions, useMinesweeperFieldGetter, useMinesweeperRestart } from \"./hooks\";\n\nexport const useAutoSolver = () => {\n    const solveTimerHandler = useRef<number>();\n    const lasPredictRef = useRef<Required<SolveFieldState>['predict']>();\n    const [openCells, markCells] = useMineSweeperActions();\n    const getStats = useGameStatsGetter();\n    const getField = useMinesweeperFieldGetter();\n    const restart = useMinesweeperRestart();\n\n    const solverSettings = useSolverSettings();\n\n    const applySolveFieldState = useCallback((state: Partial<SolveFieldState>): Promise<GameCommandOpenResp> => {\n        lasPredictRef.current = state.predict;\n\n        if (state.mark && state.mark.length) {\n            markCells(state.mark);\n        }\n        if (state.open && state.open.length) {\n            return openCells(state.open);\n        }\n\n        return Promise.reject('Nothing to open');\n    }, [lasPredictRef, openCells, markCells]);\n\n    const solve = useCallback(async () => {\n        let state: SolveFieldState | void = void 0;\n        const field = getField();\n        if (lasPredictRef.current && lasPredictRef.current.size) {\n            state = checkPredict(field, lasPredictRef.current);\n        }\n\n        if (!state || !state.open.length) {\n            state = lookAtField(field, state ? state : void 0);\n        }\n\n        if ((!state.open || !state.open.length) && state.predict && state.predict.size) {\n            const predictedCell = predictFromState(state.predict, field, solverSettings.predictBound);\n            if (predictedCell) {\n                state = {\n                    mark: [],\n                    open: [predictedCell],\n                };\n            } else if (solverSettings.selectRandomCellIfNoAnyChoice) {\n                const randomCell = openRandomCell(field);\n                if (randomCell) {\n                    state = {\n                        ...state,\n                        open: [randomCell]\n                    }\n                }\n            }\n        }\n\n        if (!state.open.length) {\n            const stats = getStats();\n            if (stats && !stats.startGame) {\n                const randomCell = openRandomCell(field);\n                if (randomCell) {\n                    state = {\n                        ...state,\n                        open: [randomCell]\n                    }\n                }\n            }\n        }\n\n        if (state) {\n            const resp = await applySolveFieldState(state);\n            switch (resp.status) {\n                case GameCommandOpenRespStatus.WIN:\n                    lasPredictRef.current = void 0;\n                    break;\n                case GameCommandOpenRespStatus.LOSE:\n                    lasPredictRef.current = void 0;\n                    await restart();\n                    solveTimerHandler.current = setTimeout(solve);\n                    break;\n                case GameCommandOpenRespStatus.OK:\n                    solveTimerHandler.current = setTimeout(solve, solverSettings.stepTimeout);\n                    break;\n            }\n        }\n    }, [getField, getStats, restart, lasPredictRef, applySolveFieldState, solverSettings]);\n\n    return [solve, useCallback(() => {\n        debugger;\n        if (solveTimerHandler.current) {\n            clearTimeout(solveTimerHandler.current);\n        }\n    }, [solveTimerHandler])];\n};\n","import { GameStateEnum } from \"@minesweeper/game\";\nimport React from \"react\";\nimport { useMinesweeperLoading, useMinesweeperState } from \"../hooks\";\n\nexport const GameStateIndicator = () => {\n    const loading = useMinesweeperLoading();\n    const state = useMinesweeperState();\n    switch (state) {\n        case GameStateEnum.Win:\n            return (<>🥳</>);\n        case GameStateEnum.Lose:\n            return (<>😢</>);\n    }\n    return (<>{ loading ? '🤔' : '🙂' }</>)\n};\n","import React, { useCallback, useRef, useState } from \"react\";\nimport { Button } from \"../../Button\";\nimport { useMinesweeperRestart } from \"../hooks\";\nimport { useAutoSolver } from \"../solver.hooks\";\nimport { GameStateIndicator } from \"./GameStateIndicator\";\nimport './index.scss';\n\nexport const GameHeader = ({ close }: { close: () => void }) => {\n    const [autoSolverRunned, setAutoSolverRinned] = useState(false);\n    const restart = useMinesweeperRestart();\n    const [solve, stop] = useAutoSolver();\n    const toggleAutoSolver = useCallback(() => {\n        if (autoSolverRunned) {\n            setAutoSolverRinned(false);\n            stop();\n        } else {\n            setAutoSolverRinned(true);\n            solve();\n        }\n    }, [solve, stop, autoSolverRunned, setAutoSolverRinned]);\n    return (\n        <div className='minesweeper-header'>\n            <Button onClick={ close }>Close Game</Button>\n            <div className='minesweeper-header__center'>\n                <Button className='bombs-indicator' onClick={ restart }>\n                    <GameStateIndicator/>\n                </Button>\n                {/*<GameTimer/>*/ }\n            </div>\n            <Button onClick={ toggleAutoSolver }>\n                { autoSolverRunned ? 'Stop Auto-Solver' : 'Run Auto-Solver' }\n            </Button>\n        </div>\n    )\n};\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { Button } from \"../Button\";\nimport { useGameFieldCellSizeState } from \"../FieldSettings/hooks\";\nimport { GameField } from \"./Field\";\nimport { GameHeader } from \"./Header\";\nimport './index.scss';\n\nconst MIN_CELL_SIZE = 6; // NOTION: 6 - is the min available font-size for default fonts\nconst MAX_CELL_SIZE = 15;\n\nfunction useMIneSweeperCellSizeWithControls(): [number, () => void, () => void] {\n    const [size, setSize] = useGameFieldCellSizeState(7);\n\n    const plus = useCallback(() => {\n        if (size <= MAX_CELL_SIZE) {\n            setSize(size + 1);\n        }\n    }, [size, setSize]);\n    const minus = useCallback(() => {\n        if (size >= MIN_CELL_SIZE) {\n            setSize(size - 1);\n        }\n    }, [size, setSize]);\n\n    useEffect(() => {\n        function onKeydown(e: KeyboardEvent) {\n            if (e.metaKey) {\n                switch (e.key) {\n                    case '+':\n                        e.preventDefault();\n                        plus();\n                        break;\n                    case '-' :\n                        e.preventDefault();\n                        minus();\n                        break;\n                }\n            }\n        }\n\n        document.addEventListener('keydown', onKeydown);\n        return () => document.removeEventListener(\"keydown\", onKeydown);\n    }, [plus, minus]);\n    return [size, plus, minus];\n}\n\ninterface MinesweeperGameProps {\n    close: () => void;\n}\n\nexport const MinesweeperGame = ({ close }: MinesweeperGameProps) => {\n    const [size, plus, minus] = useMIneSweeperCellSizeWithControls();\n    const plusAvailable = useMemo(() => size <= MAX_CELL_SIZE, [size]);\n    const minusAvailable = useMemo(() => size >= MIN_CELL_SIZE, [size]);\n    const styles = useMemo(() => ({ fontSize: size }), [size]);\n\n    return (\n        <div className='minesweeper-body'>\n            <div className=\"minesweeper-game\">\n                <div className='minesweeper-game__header'>\n                    <GameHeader close={ close }/>\n                </div>\n                <div className='minesweeper-game__field minesweeper-game-field' style={ styles }>\n                    <GameField/>\n                </div>\n            </div>\n            <div className='minesweeper-game-field__config'>\n                <Button disabled={ !plusAvailable } onClick={ plus }>+</Button>\n                <Button disabled={ !minusAvailable } onClick={ minus }>-</Button>\n            </div>\n        </div>\n    );\n};\n","import React, { MouseEvent, useCallback } from \"react\";\nimport { Button } from \"../../Button\";\nimport './index.scss';\n\ninterface MenuProps {\n    onSelect: (level: number) => void;\n}\n\nexport const Menu = ({ onSelect }: MenuProps) => {\n    const start = useCallback((e: MouseEvent<HTMLElement>) => {\n        if (e.target) {\n            // @ts-ignore TODO\n            const dataset = e.target.dataset as { level: string };\n            if (!isNaN(+dataset.level)) {\n                onSelect(+dataset.level);\n            }\n        }\n    }, [onSelect]);\n\n    return (\n        <div className=\"minesweeper-buttons\" onClick={ start }>\n            <Button className=\"minesweeper-buttons__item\" data-level={ 1 }>Level 1</Button>\n            <Button className=\"minesweeper-buttons__item\" data-level={ 2 }>Level 2</Button>\n            <Button className=\"minesweeper-buttons__item\" data-level={ 3 }>Level 3</Button>\n            <Button className=\"minesweeper-buttons__item\" data-level={ 4 }>Level 4</Button>\n        </div>\n    )\n};\n","import { CommandServerState } from \"@minesweeper/server\";\nimport React, { useLayoutEffect, useRef } from 'react';\nimport { useServerState } from \"../../server/hooks\";\n\nexport const LoadingDialog = () => {\n    const state = useServerState();\n    const dialog = useRef<HTMLDialogElement>(null);\n    useLayoutEffect(() => {\n        if (dialog.current) {\n            switch (state) {\n                case CommandServerState.CLOSED:\n                case CommandServerState.CONNECTING:\n                    if (dialog.current && !dialog.current.open) {\n                        dialog.current.showModal();\n                    }\n                    break;\n                case CommandServerState.CONNECTED:\n                    if (dialog.current && dialog.current.open) {\n                        dialog.current && dialog.current.close();\n                    }\n                    break;\n            }\n        }\n    }, [state]);\n    return (\n        <dialog ref={ dialog } className='server-state-dialog'>\n            {\n                state === CommandServerState.CONNECTING && '...Connecting'\n            }\n            {\n                state === CommandServerState.CLOSED && 'Connection closed'\n            }\n        </dialog>\n    )\n};\n","import { useContext, useEffect, useState } from \"react\";\nimport { ServerContext } from \"./context\";\n\nexport const useServerState = () => {\n    const server = useContext(ServerContext);\n    const [state, setState] = useState(server.state);\n    useEffect(() => {\n        return server.on(\"change\", setState);\n    }, [server]);\n    return state;\n};\n","import React, { useCallback, useState } from 'react';\nimport './App.scss';\nimport { GameFieldStorageContextComponent } from \"./components/FieldSettings/context\";\nimport { GameStatsScope } from \"./components/GameStats/context\";\nimport { MinesweeperGame } from \"./components/minesweeper\";\nimport { MineSweeper } from \"./components/minesweeper/hooks/context\";\nimport { Menu } from \"./components/minesweeper/menu\";\nimport { LoadingDialog } from \"./components/Server/LoadingDialog\";\nimport { ServerProvider } from \"./server/context\";\n\nconst Game = () => {\n    const [level, setLevel] = useState<number | null>(null);\n    const close = useCallback(() => setLevel(null), []);\n    if (level === null) {\n        return <Menu onSelect={ (level) => setLevel(level) }/>\n    }\n    return (\n        <GameStatsScope>\n            <MineSweeper level={ level }>\n                <MinesweeperGame close={ close }/>\n            </MineSweeper>\n        </GameStatsScope>\n\n    )\n};\n\nconst App: React.FC = () => {\n    return (\n        <ServerProvider>\n            <LoadingDialog/>\n            <div className=\"game-wrapper\">\n                <GameFieldStorageContextComponent>\n                    <Game/>\n                </GameFieldStorageContextComponent>\n            </div>\n        </ServerProvider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}